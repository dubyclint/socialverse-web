// scripts/fix-import-paths.js
import { readFileSync, writeFileSync, readdirSync } from 'fs';
import { join } from 'path';

const controllersDir = 'server/api/controllers';
const routesDir = 'server/api';

// Function to find all JS files recursively
function findJSFiles(dir, fileList = []) {
  const files = readdirSync(dir, { withFileTypes: true });
  
  files.forEach(file => {
    if (file.isDirectory()) {
      findJSFiles(join(dir, file.name), fileList);
    } else if (file.name.endsWith('.js')) {
      fileList.push(join(dir, file.name));
    }
  });
  
  return fileList;
}

// Fix controller imports
const controllerFiles = findJSFiles(controllersDir);
controllerFiles.forEach(filePath => {
  let content = readFileSync(filePath, 'utf8');
  
  // Fix supabase import
  content = content.replace(
    /import { supabase } from ['"]\.\.\/\.\.\/\.\.\/utils\/supabase\.js['"];?/g,
    "import { supabase } from '~/utils/supabase.js';"
  );
  
  // Fix model imports
  content = content.replace(
    /import { (\w+) } from ['"]\.\.\/\.\.\/\.\.\/models\/(\w+)\.js['"];?/g,
    "import { $1 } from '~/models/$2.js';"
  );
  
  writeFileSync(filePath, content);
  console.log(`âœ… Fixed imports in ${filePath}`);
});

// Fix route imports
const routeFiles = findJSFiles(routesDir).filter(f => !f.includes('controllers'));
routeFiles.forEach(filePath => {
  let content = readFileSync(filePath, 'utf8');
  
  // Count how many directories deep we are from server/api
  const depth = filePath.split('/').length - 3; // server/api = 2, so subtract 3
  const relativePath = '../'.repeat(depth);
  
  // Fix controller imports
  content = content.replace(
    /import { (\w+) } from ['"]\.\.\/+controllers\/(\w+)\.js['"];?/g,
    `import { $1 } from '${relativePath}controllers/$2.js';`
  );
  
  writeFileSync(filePath, content);
  console.log(`âœ… Fixed imports in ${filePath}`);
});

console.log('ðŸŽ‰ All import paths fixed!');
