-- Drop existing universe tables to recreate with correct schema
DROP TABLE IF EXISTS universe_matches CASCADE;
DROP TABLE IF EXISTS universe_translations CASCADE;
DROP TABLE IF EXISTS universe_reactions CASCADE;
DROP TABLE IF EXISTS universe_messages CASCADE;

-- Recreate universe_messages with UUID
CREATE TABLE IF NOT EXISTS universe_messages (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES profiles(id) ON DELETE CASCADE NOT NULL,
  content TEXT NOT NULL,
  country VARCHAR(100),
  interest VARCHAR(100),
  language VARCHAR(10) DEFAULT 'en',
  likes INTEGER DEFAULT 0,
  replies INTEGER DEFAULT 0,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Universe Reactions Table
CREATE TABLE IF NOT EXISTS universe_reactions (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  message_id UUID REFERENCES universe_messages(id) ON DELETE CASCADE NOT NULL,
  user_id UUID REFERENCES profiles(id) ON DELETE CASCADE NOT NULL,
  emoji VARCHAR(10) NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(message_id, user_id, emoji)
);

-- Universe Translations Table
CREATE TABLE IF NOT EXISTS universe_translations (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  message_id UUID REFERENCES universe_messages(id) ON DELETE CASCADE NOT NULL,
  original_text TEXT NOT NULL,
  translated_text TEXT NOT NULL,
  target_language VARCHAR(10) NOT NULL,
  user_id UUID REFERENCES profiles(id) ON DELETE CASCADE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Universe User Matches Table
CREATE TABLE IF NOT EXISTS universe_matches (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id_1 UUID REFERENCES profiles(id) ON DELETE CASCADE NOT NULL,
  user_id_2 UUID REFERENCES profiles(id) ON DELETE CASCADE NOT NULL,
  match_score INTEGER DEFAULT 0,
  common_interests INTEGER DEFAULT 0,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(user_id_1, user_id_2)
);

-- Create indexes
CREATE INDEX IF NOT EXISTS idx_universe_messages_user_id ON universe_messages(user_id);
CREATE INDEX IF NOT EXISTS idx_universe_messages_country ON universe_messages(country);
CREATE INDEX IF NOT EXISTS idx_universe_messages_interest ON universe_messages(interest);
CREATE INDEX IF NOT EXISTS idx_universe_messages_language ON universe_messages(language);
CREATE INDEX IF NOT EXISTS idx_universe_messages_created_at ON universe_messages(created_at DESC);
CREATE INDEX IF NOT EXISTS idx_universe_reactions_message_id ON universe_reactions(message_id);
CREATE INDEX IF NOT EXISTS idx_universe_reactions_user_id ON universe_reactions(user_id);
CREATE INDEX IF NOT EXISTS idx_universe_translations_message_id ON universe_translations(message_id);
CREATE INDEX IF NOT EXISTS idx_universe_translations_user_id ON universe_translations(user_id);
CREATE INDEX IF NOT EXISTS idx_universe_matches_user_id_1 ON universe_matches(user_id_1);
CREATE INDEX IF NOT EXISTS idx_universe_matches_user_id_2 ON universe_matches(user_id_2);

-- Enable RLS
ALTER TABLE universe_messages ENABLE ROW LEVEL SECURITY;
ALTER TABLE universe_reactions ENABLE ROW LEVEL SECURITY;
ALTER TABLE universe_translations ENABLE ROW LEVEL SECURITY;
ALTER TABLE universe_matches ENABLE ROW LEVEL SECURITY;

-- RLS Policies
CREATE POLICY "Users can view universe messages" ON universe_messages FOR SELECT USING (true);
CREATE POLICY "Users can create universe messages" ON universe_messages FOR INSERT WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Users can update their own messages" ON universe_messages FOR UPDATE USING (auth.uid() = user_id);
CREATE POLICY "Users can view reactions" ON universe_reactions FOR SELECT USING (true);
CREATE POLICY "Users can add reactions" ON universe_reactions FOR INSERT WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Users can view translations" ON universe_translations FOR SELECT USING (true);
CREATE POLICY "Users can create translations" ON universe_translations FOR INSERT WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Users can view their matches" ON universe_matches FOR SELECT USING (auth.uid() = user_id_1 OR auth.uid() = user_id_2);

-- Trigger for updated_at
CREATE OR REPLACE FUNCTION update_universe_messages_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER universe_messages_updated_at_trigger
BEFORE UPDATE ON universe_messages
FOR EACH ROW
EXECUTE FUNCTION update_universe_messages_updated_at();
