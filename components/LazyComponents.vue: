<!-- components/LazyComponents.vue -->
<template>
  <div>
    <!-- Lazy load heavy components -->
    <Suspense>
      <template #default>
        <LazyTradeListings v-if="showTrades" @close="showTrades = false" />
      </template>
      <template #fallback>
        <div class="loading-skeleton">
          <div class="skeleton-line"></div>
          <div class="skeleton-line"></div>
          <div class="skeleton-line"></div>
        </div>
      </template>
    </Suspense>

    <Suspense>
      <template #default>
        <LazyAdminAdAnalytics v-if="isAdmin && showAnalytics" />
      </template>
      <template #fallback>
        <div class="loading-spinner">Loading analytics...</div>
      </template>
    </Suspense>

    <Suspense>
      <template #default>
        <LazyPostDetail 
          v-if="selectedPost" 
          :post="selectedPost" 
          @close="selectedPost = null" 
        />
      </template>
      <template #fallback>
        <div class="post-skeleton">Loading post...</div>
      </template>
    </Suspense>
  </div>
</template>

<script setup lang="ts">
// Lazy component definitions
const LazyTradeListings = defineAsyncComponent(() => import('./TradeListings.vue'))
const LazyAdminAdAnalytics = defineAsyncComponent(() => import('./AdminAdAnalytics.vue'))
const LazyPostDetail = defineAsyncComponent(() => import('./PostDetail.vue'))

// Component state
const showTrades = ref(false)
const showAnalytics = ref(false)
const selectedPost = ref(null)
const isAdmin = ref(false)

// Props
interface Props {
  userRole?: string
}

const props = withDefaults(defineProps<Props>(), {
  userRole: 'user'
})

// Computed
const isAdmin = computed(() => props.userRole === 'admin')

// Methods
const loadTradeComponent = () => {
  showTrades.value = true
}

const loadAnalytics = () => {
  if (isAdmin.value) {
    showAnalytics.value = true
  }
}
</script>

<style scoped>
.loading-skeleton {
  animation: pulse 2s infinite;
}

.skeleton-line {
  height: 20px;
  background: #e2e8f0;
  border-radius: 4px;
  margin-bottom: 10px;
}

.loading-spinner {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100px;
  color: #64748b;
}

.post-skeleton {
  background: #f8fafc;
  border-radius: 8px;
  padding: 20px;
  margin: 10px 0;
}

@keyframes pulse {
  0%, 100% { opacity: 1; }
  50% { opacity: 0.5; }
}
</style>
