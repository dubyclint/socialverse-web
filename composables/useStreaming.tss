// composables/useStreaming.ts - FIXED (excerpt showing API calls)
import { ref, computed, onMounted, onUnmounted } from 'vue'
import { useSocket } from '~/composables/useSocket'
import { useAuth } from '~/composables/useAuth'

export const useStreaming = () => {
  const api = useApi()
  const streams = ref([])
  const currentStream = ref(null)
  const loading = ref(false)
  const error = ref(null)

  const loadUserStreams = async () => {
    loading.value = true
    try {
      const result = await api.stream.getUserStreams()
      if (result.success) {
        streams.value = result.data
      }
    } catch (err) {
      error.value = err.message
    } finally {
      loading.value = false
    }
  }

  const createStream = async (streamData: any) => {
    loading.value = true
    try {
      const result = await api.stream.create(streamData)
      if (result.success) {
        currentStream.value = result.data
        streams.value.push(result.data)
        return result.data
      }
    } catch (err) {
      error.value = err.message
      throw err
    } finally {
      loading.value = false
    }
  }

  const getStream = async (streamId: string) => {
    try {
      const result = await api.stream.get(streamId)
      if (result.success) {
        currentStream.value = result.data
        return result.data
      }
    } catch (err) {
      error.value = err.message
      throw err
    }
  }

  const updateStream = async (streamId: string, updates: any) => {
    try {
      const result = await api.stream.update(streamId, updates)
      if (result.success) {
        currentStream.value = result.data
        return result.data
      }
    } catch (err) {
      error.value = err.message
      throw err
    }
  }

  const deleteStream = async (streamId: string) => {
    try {
      const result = await api.stream.delete(streamId)
      if (result.success) {
        streams.value = streams.value.filter(s => s.id !== streamId)
        return true
      }
    } catch (err) {
      error.value = err.message
      throw err
    }
  }

  onMounted(() => {
    loadUserStreams()
  })

  return {
    streams,
    currentStream,
    loading,
    error,
    loadUserStreams,
    createStream,
    getStream,
    updateStream,
    deleteStream
  }
}
